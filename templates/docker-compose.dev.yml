# Complete local development stack - mirrors production
version: '3.8'

services:
  # Main application
  app:
    build: 
      context: .
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "${APP_PORT:-3000}:3000"
      - "9229:9229" # Node.js debugger
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    env_file:
      - .env.local
    environment:
      - NODE_ENV=development
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@db:5432/app_dev}
      - NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - CLAUDE_AGENT_CONTEXT=${CLAUDE_AGENT_CONTEXT:-{}}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.app.rule=Host(`localhost`)"

  # PostgreSQL Database (mirrors Supabase)
  db:
    image: supabase/postgres:15.1.0.147
    ports:
      - "${DB_PORT:-54322}:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app_dev}
      - POSTGRES_HOST_AUTH_METHOD=trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./supabase/migrations:/docker-entrypoint-initdb.d
      - ./supabase/seed.sql:/docker-entrypoint-initdb.d/zzz-seed.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Supabase Studio
  studio:
    image: supabase/studio:20240101-5d8c6f0
    ports:
      - "${STUDIO_PORT:-54323}:3000"
    environment:
      - SUPABASE_URL=http://kong:8000
      - STUDIO_DEFAULT_ORGANIZATION=${SUPABASE_ORG:-local}
      - STUDIO_DEFAULT_PROJECT=${SUPABASE_PROJECT:-local}
      - STUDIO_PORT=3000
    depends_on:
      kong:
        condition: service_started
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Supabase Kong (API Gateway)
  kong:
    image: kong/kong-gateway:3.2.2.5
    ports:
      - "${KONG_HTTP_PORT:-54321}:8000"
      - "${KONG_HTTPS_PORT:-54444}:8443"
    environment:
      - KONG_DATABASE=off
      - KONG_DECLARATIVE_CONFIG=/kong/kong.yml
      - KONG_DNS_ORDER=LAST,A,CNAME
      - KONG_PLUGINS=request-id,kong-access-token,cors,key-auth,acl,basic-auth
      - KONG_LOG_LEVEL=info
    volumes:
      - ./supabase/kong.yml:/kong/kong.yml:ro
    depends_on:
      - auth
      - rest
      - realtime

  # Supabase Auth
  auth:
    image: supabase/gotrue:v2.132.3
    environment:
      - GOTRUE_API_HOST=0.0.0.0
      - GOTRUE_API_PORT=9999
      - API_EXTERNAL_URL=${API_EXTERNAL_URL:-http://localhost:54321}
      - GOTRUE_DB_DRIVER=postgres
      - GOTRUE_DB_DATABASE_URL=postgresql://supabase_auth_admin:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-app_dev}
      - GOTRUE_SITE_URL=${SITE_URL:-http://localhost:3000}
      - GOTRUE_URI_ALLOW_LIST=${ADDITIONAL_REDIRECT_URLS:-}
      - GOTRUE_DISABLE_SIGNUP=${DISABLE_SIGNUP:-false}
      - GOTRUE_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - GOTRUE_JWT_EXP=${JWT_EXPIRY:-3600}
      - GOTRUE_JWT_DEFAULT_GROUP_NAME=authenticated
    depends_on:
      db:
        condition: service_healthy

  # Supabase REST API
  rest:
    image: postgrest/postgrest:v11.2.2
    environment:
      - PGRST_DB_URI=postgresql://authenticator:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-app_dev}
      - PGRST_DB_SCHEMAS=${PGRST_DB_SCHEMAS:-public}
      - PGRST_DB_ANON_ROLE=anon
      - PGRST_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - PGRST_DB_USE_LEGACY_GUCS=false
    depends_on:
      db:
        condition: service_healthy

  # Supabase Realtime
  realtime:
    image: supabase/realtime:v2.25.50
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - DB_USER=supabase_admin
      - DB_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DB_NAME=${POSTGRES_DB:-app_dev}
      - DB_AFTER_CONNECT_QUERY=SET search_path TO _realtime
      - DB_ENC_KEY=supabaserealtime
      - API_JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-token-with-at-least-32-characters-long}
      - FLY_ALLOC_ID=local
      - FLY_APP_NAME=realtime
      - SECRET_KEY_BASE=UpNVntn3cDxHJpq99YMc1T1AQgQpc8kfYTuRgBiYa15BLrx8etQoXz3gZv1/u2oq
      - ERL_AFLAGS=-proto_dist inet_tcp
      - ENABLE_TAILSCALE=false
      - DNS_NODES='[]'
    depends_on:
      db:
        condition: service_healthy

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "${MAILHOG_WEB_PORT:-8025}:8025"
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH=/maildir
    volumes:
      - mailhog_data:/maildir

  # MinIO for S3 storage simulation
  storage:
    image: minio/minio:latest
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS:-uploads,public}
    volumes:
      - storage_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx reverse proxy and load balancer
  proxy:
    image: nginx:alpine
    ports:
      - "${PROXY_PORT:-80}:80"
      - "${PROXY_SSL_PORT:-443}:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/sites-enabled:/etc/nginx/conf.d:ro
      - ./infrastructure/ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
      - studio
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources:ro

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_GRPC_PORT:-14250}:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

  # Ngrok for tunneling (optional)
  ngrok:
    image: ngrok/ngrok:latest
    profiles: ["tunnel"]
    environment:
      - NGROK_AUTHTOKEN=${NGROK_AUTHTOKEN}
    ports:
      - "4040:4040" # Ngrok web interface
    command: 'http app:3000 --log=stdout --authtoken=${NGROK_AUTHTOKEN}'
    depends_on:
      - app

  # Agent system containers
  agent-coordinator:
    build:
      context: ./src/cli
      dockerfile: Dockerfile.agent
    volumes:
      - .:/workspace
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      # - CLAUDE_API_KEY=${CLAUDE_API_KEY}  # Set in .env if needed
      - AGENT_WORKSPACE=/workspace
      - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
      - app
      - db

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  storage_data:
    driver: local
  mailhog_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Health check for the entire stack
x-healthcheck-config: &healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s